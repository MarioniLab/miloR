% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/testNhoods.R
\name{testNhoods}
\alias{testNhoods}
\title{Perform differential neighbourhood abundance testing}
\arguments{
\item{x}{A \code{\linkS4class{Milo}} object with a non-empty
\code{nhoodCounts} slot.}

\item{design}{A \code{formula} or \code{model.matrix} object describing the
experimental design for differential abundance testing. The last component
of the formula or last column of the model matrix are by default the test
variable. This behaviour can be overridden by setting the \code{model.contrasts}
argument}

\item{design.df}{A \code{data.frame} containing meta-data to which \code{design}
refers to}

\item{min.mean}{A scalar used to threshold neighbourhoods on the minimum
average cell counts across samples.}

\item{model.contrasts}{A string vector that defines the contrasts used to perform
DA testing.}

\item{fdr.weighting}{The spatial FDR weighting scheme to use. Choice from edge,
vertex, neighbour-distance or k-distance (default). If \code{none} is passed no
spatial FDR correction is performed and returns a vector of NAs.}

\item{seed}{Seed number used for pseudorandom number generators.}

\item{robust}{If robust=TRUE then this is passed to edgeR and limma which use a robust
estimation for the global quasilikihood dispersion distribution. See \code{edgeR} and
Phipson et al, 2013 for details.}
}
\value{
A \code{data.frame} of model results.
}
\description{
This will perform differential neighbourhood abundance testing after cell
counting.
}
\details{
This function wraps up several steps of differential abundance testing using
the \code{edgeR} functions. These could be performed separately for users
who want to exercise more contol over their DA testing. By default this
function sets the \code{lib.sizes} to the log10(colSums(x)), and uses the
Quasi-Likelihood F-test in \code{glmQLFTest} for DA testing. FDR correction
is performed separately as the default multiple-testing correction is
inappropriate for neighbourhoods with overlapping cells.
}
\examples{
library(SingleCellExperiment)
ux.1 <- matrix(rpois(12000, 5), ncol=400)
ux.2 <- matrix(rpois(12000, 4), ncol=400)
ux <- rbind(ux.1, ux.2)
vx <- log2(ux + 1)
pca <- prcomp(t(vx))

sce <- SingleCellExperiment(assays=list(counts=ux, logcounts=vx),
                            reducedDims=SimpleList(PCA=pca$x))

milo <- Milo(sce)
milo <- buildGraph(milo, k=20, d=10, transposed=TRUE)
milo <- makeNhoods(milo, k=20, d=10, prop=0.3)

cond <- rep("A", ncol(milo))
cond.a <- sample(1:ncol(milo), size=floor(ncol(milo)*0.25))
cond.b <- setdiff(1:ncol(milo), cond.a)
cond[cond.b] <- "B"
meta.df <- data.frame(Condition=cond, Replicate=c(rep("R1", 132), rep("R2", 132), rep("R3", 136)))
meta.df$SampID <- paste(meta.df$Condition, meta.df$Replicate, sep="_")
milo <- countCells(milo, meta.data=meta.df, samples="SampID")

test.meta <- data.frame("Condition"=c(rep("A", 3), rep("B", 3)), "Replicate"=rep(c("R1", "R2", "R3"), 2))
test.meta$Sample <- paste(test.meta$Condition, test.meta$Replicate, sep="_")
rownames(test.meta) <- test.meta$Sample
da.res <- testNhoods(milo, design=~Condition, design.df=test.meta[colnames(nhoodCounts(milo)), ])
da.res

}
\author{
Mike Morgan
}
