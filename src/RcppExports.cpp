// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// invertPseudoVar
arma::sp_mat invertPseudoVar(arma::sp_mat A, arma::sp_mat B, arma::sp_mat Z);
RcppExport SEXP _miloR_invertPseudoVar(SEXP ASEXP, SEXP BSEXP, SEXP ZSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::sp_mat >::type A(ASEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type B(BSEXP);
    Rcpp::traits::input_parameter< arma::sp_mat >::type Z(ZSEXP);
    rcpp_result_gen = Rcpp::wrap(invertPseudoVar(A, B, Z));
    return rcpp_result_gen;
END_RCPP
}
// multiP
List multiP(List partials, arma::mat psvar_in);
RcppExport SEXP _miloR_multiP(SEXP partialsSEXP, SEXP psvar_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type partials(partialsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type psvar_in(psvar_inSEXP);
    rcpp_result_gen = Rcpp::wrap(multiP(partials, psvar_in));
    return rcpp_result_gen;
END_RCPP
}
// pseudovarPartial
List pseudovarPartial(arma::mat x, List rlevels, StringVector cnames);
RcppExport SEXP _miloR_pseudovarPartial(SEXP xSEXP, SEXP rlevelsSEXP, SEXP cnamesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< List >::type rlevels(rlevelsSEXP);
    Rcpp::traits::input_parameter< StringVector >::type cnames(cnamesSEXP);
    rcpp_result_gen = Rcpp::wrap(pseudovarPartial(x, rlevels, cnames));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_miloR_invertPseudoVar", (DL_FUNC) &_miloR_invertPseudoVar, 3},
    {"_miloR_multiP", (DL_FUNC) &_miloR_multiP, 2},
    {"_miloR_pseudovarPartial", (DL_FUNC) &_miloR_pseudovarPartial, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_miloR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
